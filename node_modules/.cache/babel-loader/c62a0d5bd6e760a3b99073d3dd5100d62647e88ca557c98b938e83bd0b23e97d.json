{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst apiUrl = \"http://localhost:3000/api/v1/messages\";\nexport const fetchMessages = createAsyncThunk(\"messages/fetchMessages\", async () => {\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  console.log(response);\n  return response.json();\n});\nexport const messagesReducer = createSlice({\n  name: \"messages\",\n  initialState: {\n    messages: [],\n    status: null\n  },\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchMessages.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(fetchMessages.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      // Add any fetched messages to the array\n      state.messages = action.payload;\n    }).addCase(fetchMessages.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport default messagesReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiUrl","fetchMessages","response","fetch","method","headers","console","log","json","messagesReducer","name","initialState","messages","status","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","error","message","reducer"],"sources":["/home/addis/Documents/GitHub/capstone/two-app/hello-rails-frontend/src/features/message/messageSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst apiUrl = \"http://localhost:3000/api/v1/messages\";\n\nexport const fetchMessages = createAsyncThunk(\"messages/fetchMessages\", async () => {\n    const response = await fetch(apiUrl, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            },\n        });\n    console.log(response)\n    return response.json();\n    }\n);\n\nexport const messagesReducer = createSlice({\n    name: \"messages\",\n    initialState: {\n        messages: [],\n        status: null,\n    },\n    reducers: {},\n    extraReducers(builder) {\n        builder\n            .addCase(fetchMessages.pending, (state, action) => {\n                state.status = \"loading\";\n            })\n            .addCase(fetchMessages.fulfilled, (state, action) => {\n                state.status = \"succeeded\";\n                // Add any fetched messages to the array\n                state.messages = action.payload;\n            })\n            .addCase(fetchMessages.rejected, (state, action) => {\n                state.status = \"failed\";\n                state.error = action.error.message;\n            });\n    }\n    \n});\n\nexport default messagesReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,MAAM,GAAG,uCAAuC;AAEtD,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EAChF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,EAAE;IACjCI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IAChB;EACJ,CAAC,CAAC;EACNC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACrB,OAAOA,QAAQ,CAACM,IAAI,EAAE;AACtB,CAAC,CACJ;AAED,OAAO,MAAMC,eAAe,GAAGX,WAAW,CAAC;EACvCY,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,CAACC,OAAO,EAAE;IACnBA,OAAO,CACFC,OAAO,CAAChB,aAAa,CAACiB,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACN,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDI,OAAO,CAAChB,aAAa,CAACoB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1B;MACAM,KAAK,CAACP,QAAQ,GAAGQ,MAAM,CAACE,OAAO;IACnC,CAAC,CAAC,CACDL,OAAO,CAAChB,aAAa,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACK,KAAK,GAAGJ,MAAM,CAACI,KAAK,CAACC,OAAO;IACtC,CAAC,CAAC;EACV;AAEJ,CAAC,CAAC;AAEF,eAAehB,eAAe,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}